// [콜백 함수]
// 다른 코드의 인자로 넘겨주는 함수이다.
// 콜백함수의 여러가지 특징과 바람직하지 않은 상황(콜백 지옥)을 만났을 때 어떻게 대처해야하는지 알아보자.

// 나는 이전에 콜백 함수를 사용한 적이 있다.
// setTimeout 을 예시로 들어보자.
setTimeout(function () { // function 을 인자로 넣음
  // 로직을 넣는 곳
  console.log("hello");
}, 1000); // 1000 => 1초 뒤에 로직이 실행됌

const numbers = [1, 2, 3, 4, 5];
numbers.forEach(function (item) { // function 을 인자로 넣음
  console.log(item); // 1, 2, 3, 4, 5 출력
})



// [콜백 함수란?]
// 1. 다른 코드의 인자로 넘겨주는 함수에요! 인자로 넘겨준다는 얘기는 콜백함수를 넘겨받는 코드가 있다는 얘기겠죠. 
//    - `forEach`**,** `setTimeout` 등이 되겠네요.
// 2. 콜백 함수를 넘겨받은 위와 같은 코드 `forEach`**,** `setTimeout` 등은 **이 콜백 함수**를 필요에 따라 적절한 시점에 실행하게 돼요.(제어권이 그들에게 있는거죠)
// 3. (코어자바스크립트의 예시) 다음 날 친구와 8시에 만나기로 한 스펀지밥 😂
// 3. (코어자바스크립트의 예시) 다음 날 친구와 8시에 만나기로 한 스펀지밥 😂
//    3-1. ~~(현명하지 않은)~~ 알람을 안 맞춘 스펀지밥..                        
//        1. 불안한 마음으로 계-속 깨요
//        2. 밤새 몇시인지 확인하느라 뒤척여 컨디션이 좋지 않아요
//        3. **수시로 시간을 구하는 함수를 직접 호출했어요**(제어권 : 스펀지밥)
//            1. 시간을 구하는 함수 : 눈 뜨고 → 일어나고 → 시계 보고 → 아직 안됐네? → 다시 눕고 → 눈 감고 → 잠 들고
//    3-2. ~~(현명한)~~ 알람을 맞춘 스밥                        
//        1. 알람시계를 세팅하고 꿀잠을 자요!
//        2. 6시에 알람소리를 듣고 상쾌하게 일어나 컨디션이 너무 좋아요
//        3. 시계의 알람을 설정하는 **함수(알람시계)**를 호출했고, 그 **함수(알람시계)**가 ‘알아서’ 스펀지밥이 정해놓은 시간이 됐을 때 ‘알람이 울리는 결과’를 반환했어요(제어권 : 함수 즉, 알람시계) → **`action에 대한 제어권`**은 함수에게 있었어요 😎
// 4. callback = call(부르다) + back(되돌아오다) = 되돌아와서 호출해줘!
//    - 다시 말하면, 제어권을 넘겨줄테니 너가 알고 있는 그 로직으로 처리해줘! (::오우 엄청난 표현!::)
// 5. 즉, 콜백 함수는 다른 코드(함수 또는 메서드)에게 인자로 넘겨줌으로써 그 제어권도 함께 위임한 함수. 콜백 함수를 위임받은 코드는 자체적으로 내부 로직에 의해 이 콜백 함수를 적절한 시점에 실행 ← 이 적절한 시점 역시 제어권이 있는 위임받은 코드가 알아서 하겠네요 👍

