/* node: javascript runtime (v8엔진)
  ## 자바스크립트 실행 순서
  1. 실행 컨텍스트 생성
  2. 전역 컨텍스트 평가 스택에 추가
  3. 함수 컨텍스트 평가 스택에 추가
  4. 내부 함수까지 평가를 마쳤다면, 이벤트 루프에 밀어넣을 큐에 추가
  5. 동기/비동기를 나눠서 수행하고 일이 끝났다면 스택을 한겹씩 걷어냄
  6. 끗
  
  ### 실행 컨텍스트
  - 스택: 후입 선출 / 한쪽으로만 쌓이는 자료구조, 엘레베이터 비유하면 됌     
    - 전역 -> 선언 -> 호이스팅,TDZ -> 할당,실행 -> 실행컨텍스트(함수)
  - TDZ: 
  - this 의 동작 : 오브젝트가 불럿다, 메서드가 불럿다, 함수는 전역, 화살표 상위 객체
    - obj.a, console.log => this는 obj,console / function(){} => 전역
  - console.log : 전역 변수, 전역 객체, 내장 함수, 빌트인 메서드
  - 비동기 동작: 이벤트 루프를 자주 말함 / 멀티스레드
    - 실행 컨텍스트안에 들오면 바로 동기는 팝이되고 WEB API로 격리리되고 비동기함수가 콜스택에서는 이미 pop돼서 없어짐
  - 큐: 선입 선출 / 알바 음료 넣을 때 새거는 뒤로 넣는 걸로 비유할 수 있음

  - 스레드: 일꾼 한번에 일을 할 수 있는 
  - 클로저: 자바스크립트 선언되어있는 함수가 환경을 기억한다. (선언된 환경을 기억함)
*/


var x = 1; // 콜스텍 전역 저장 (선언부 확인 x)
const y = 2; // 콜스텍 전역 저장 (선언부 확인 y)

function foo(a) { // 콜스텍 전역 저장 (선언부 확인 foo)
  var x = 3;
  const y = 4;

  function bar(b) {
    const z = 5;
    console.log(a + b + x + y + z);
    // a = 20
    // b = 10
    // x = 3
    // y = 4
    // z = 5
    // 42
  }

  bar(10);
}

foo(20); // 42