// # 스코프(Scope)란?
// `스코프(Scope)`는 프로그램에서 변수나 함수가 참조될 수 있는 유효 범위를 의미한다.<br/>
// 스코프는 변수가 어디서 접근할 수 있는지 결정하며, 코드의 가독성과 유지보수성을 높이는데 중요하다<br/>
// 스코프는 크게 전역 스코프, 함수 스코프, 블록 스코프로 나뉜다.

// ## 전역 스코프
// 정의: 함수나 블록 밖에서 선언된 변수는 전역 스코프를 가지며, 프로그램 전체에서 접근 가능하다. 예) 전역 변수
// 특징: 어디에서나 접근이 가능하지만 전역 변수가 많아지면 의도치 않은 변수 덮어쓰기가 발생할 수 있어 유지보수가 어려워 질 수 있음
// 예시
let globalLet = "Hello World";
function test01(){
  console.log(globalLet); // "Hello World"
}
test01();
console.log(globalLet); // "Hello World"

// ## 함수 스코프
// 정의: 함수 내에서 선언된 변수는 해당 함수 내에서만 유효하다.
// 특징: 함수가 종료되면 변수는 더 이상 접근할 수 없으며 함수 내부에서 변수를 선언하지 않고 사용하면 암묵적으로 전역 변수가 될 수 있다.
// 예시
function test02_01(){
  var num = 1;
  console.log(num); // 1
}
test02_01();
console.log(num); // num을 찾을 수 없음

function test02_02(){
  var num = 2;
  if(true) {
    var num = 3; // 같은 함수 스코프 내에서 num가 재선언되고 재할당된다.
    console.log(num); // 3
  }
  console.log(num); // 3
}
test02_02();

// ## 블록 스코프
// 정의: 블록({}) 내에서 선언된 변수는 해당 블록 내에서만 유효하다.
// 특징: 블록이 종료되면 변수는 더 이상 접근할 수 없으며, 상위 블록에서 선언된 변수는 하위 블록에서 접근이 가능하지만, 하위 블록에서 다시 선언하면 새로운 변수로 인식됨
// 예시
if(true) {
  let x = 1;
  console.log(x); // 1
}
console.log(x); // x를 찾을 수 없음

for(let i = 0; i < 10; i++) {
  console.log(i); // 0,1,2,3...
}
console.log(i); // i를 찾을 수 없음

// ## 주의할점
// ### 블록스코프
// - 변수를 블록 밖에서도 사용하려면 블록 밖에서 전역으로 선언해야함
// - 블록 내에서 변수를 재선언하면 블록 내에서만 새로운 변수로 인식됨
// ### 함수 스코프
// - 함수 내에서 변수를 선언하지 않고 사용하면 암묵적으로 전역 변수가 될 수 있음 (var)
// - 함수 내 변수는 함수가 종료되면 더 이상 접근이 불가능함

// ## 상수 (Constant)
// 정의: 선언된 후에 값을 변경할 수 없는 변수이며 한 번 값이 할당되면 프로그램 실행동안 변경되지 않음
// 역할: 코드의 가독성 및 안전성을 향상하며, 특정 값이 변경되지 않는다.
// 예시
const number1 = 1;

// ## 마무리 
// 스코프는 변수나 함수의 유효 범위를 결정하며, 각 스코프를 이해하고 올바르게 사용해야 한다.
// 그렇지 않을 경우에 코드의 가독성,유지보수,안정성 모두 떨어지는 결과를 초래할 수 있을 것이며 충분히 이해하고 효율적으로 사용하도록 해보자!